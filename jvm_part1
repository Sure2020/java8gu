1.java平台无关怎么实现的
1-通过 jvm 虽然 Java 是平台无关的，但是 jvm 是平台有关的，jvm 作为一个桥梁，屏蔽了 Java 和平台之间的差异
2-Java 语言规范 Java 语言规范规定了比如说整形的大小,固定占4个字节，不像c++那样会随平台而变化。

3-Java 中布尔类型的长度也是不固定的，比如单个布尔类型变量，它占位是 32 位，如果是布尔数组，则每个元素占位 8 位。


2.java一定平台无关吗，不一定
AOT，提前编译成平台相关的机器码，而不是运行时边解释边运行。可以提高jvm启动时间，提高运行效率。

native image，GraalVM允许将Java程序编译成"原生镜像"，可以不依赖于JVM，直接运行在操作系统上。


那为啥java要走回头路，因为在serviceless盛行的时代，平台无关没那么重要了，因为都是容器部署。而缩短服务的启动时间显得尤为重要。

3. JIT技术。java代码大多数情况下是将字节码边解释成机器码，边执行，效率低一些。JIT则是将热点代码编译成机器码，并缓存，不用每次都解释一遍。

编译优化，有逃逸分析，比如作用域在方法内的。就把对象在栈上分配。

栈为什么比堆快，首先栈是程序运行前就分配好的，不像堆那样是动态申请的。且栈的内存地址是连续的，堆则未必。

4.怎么防止反编译，将java程序隔离，让别人接触不到你的class文件。或者将class文件加密，提高反编译难度。或者代码混淆，将代码替换成等价但可读性差的格式。

5. jvm 运行时的内存空间是怎样的。
程序计数器，程序计数器用来标记当前线程的字节码运行的位置。是线程私有的。
java虚拟机栈，线程私有，用来保存方法的参数，局部变量，方法出口等。每次方法调用都会创建一个栈帧，方法调用结束后，栈帧弹出，作用域结束，数据从栈中消失。
本地方法栈，和java虚拟机栈作用差不多，但可以保存本地方法的入参，返回出口，局部变量等。它支持本地代码的执行，一般是C语言编写，JVM虚拟机通过本地方法栈调用本地方法。

java堆，对象主要保存的区域，GC发生的区域，占用大部分内存空间。

方法区，运行时常量池，不展开了。

6. 对象一定分配在堆内存吗，不一定，JIT优化技术，会对对象做逃逸分析，如果一个对象的作用域在线程内或方法内，那就会分配在栈上。
为啥要在栈上分配，栈内存是连续的，存取速度，相对于堆的随机存储，栈更快。而且是程序运行前就预分配好的，堆是动态分配的。

7. OutOfMemory和StackOverFlow的区别，一个是堆内存不够，一个是栈内存不够。怎么触发，一个是不断创建对象，一个是进行很深的递归调用。
